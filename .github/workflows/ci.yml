name: CI

on:
    push:
        branches: ['dev', 'main']
    pull_request:
        branches: ['dev', 'main']

permissions:
    contents: write # to be able to publish a GitHub release
    issues: write # to be able to comment on released issues
    pull-requests: write # to be able to comment on released pull requests

jobs:
    changes:
        runs-on: ubuntu-latest
        # Set job outputs to values from filter step
        outputs:
            src: ${{ steps.filter1.outputs.src }}
            tsc: ${{ steps.filter1.outputs.tsc }}
            isNewVer: ${{ steps.filter2.outputs.new-release-published }}
            newVer: ${{ steps.filter2.outputs.release-version }}

        steps:
            - uses: actions/checkout@v3

            - uses: dorny/paths-filter@v2
              id: filter1
              with:
                  filters: |
                      src:
                        - 'src/**'
                        - 'src-tauri/**'
                        - '*.config.ts'
                        - '.postcssrc.*'
                        - 'package.json'
                      tsc:
                        - '**/*.{ts,tsx}'
                        - '*.config.ts'
                        - '.eslintrc.*'
                        - 'tsconfig*.json'

            - uses: codfish/semantic-release-action@v3
              id: filter2
              if: github.event_name == 'push' && github.ref == 'ref/heads/main'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  dry-run: true
    lint:
        runs-on: ubuntu-latest
        needs: changes
        if: needs.changes.outputs.tsc == 'true'

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup node.js 18.x
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Lint ts files
              run: pnpm lint

    build:
        needs:
            - changes
            - lint
        if: needs.changes.outputs.src == 'true'
        strategy:
            fail-fast: false
            matrix:
                platform: [windows-latest, macos-latest, ubuntu-20.04]
        runs-on: ${{ matrix.platform }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies (ubuntu only)
              if: matrix.platform == 'ubuntu-20.04'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

            - name: Install Rust stable
              uses: dtolnay/rust-toolchain@stable

            - name: Rust cache
              uses: swatinem/rust-cache@v2
              with:
                  workspaces: './src-tauri -> target'

            - name: Install dependencies
              run: pnpm install

            - name: Bump package.json version
              if: needs.changes.outputs.isNewVer == 'true'
              run: npm pkg set version='${{ needs.changes.outputs.newVer }}'

            - name: Build app
              uses: tauri-apps/tauri-action@v0

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'windows-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVer }}-windows
                  path: |
                      src-tauri/target/release/bundle/**

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'macos-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVer }}-macos-dmg
                  path: |
                      src-tauri/target/release/bundle/dmg/tauri-release-test_*_x64.dmg

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'macos-latest' }}
              with:
                  name: release-${{ needs.changes.outputs.newVer }}-macos-app
                  path: |
                      src-tauri/target/release/bundle/macos/tauri-release-test.app.tar.gz

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  name: release-${{ needs.changes.outputs.newVer }}-ubuntu-deb
                  path: |
                      src-tauri/target/release/bundle/deb/tauri-release-test_${{ needs.changes.outputs.newVer }}_amd64.deb

            - uses: actions/upload-artifact@v3
              if: ${{ needs.changes.outputs.isNewVer == 'true' && matrix.platform == 'ubuntu-20.04' }}
              with:
                  name: release-${{ needs.changes.outputs.newVer }}-ubuntu-appimage
                  path: |
                      src-tauri/target/release/bundle/appimage/tauri-release-test_${{ needs.changes.outputs.newVer }}_amd64.AppImage

    release:
        needs:
            - lint
            - build
            - changes
        if: ${{ needs.changes.outputs.isNewVer == 'true' }}
        name: Release
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - uses: actions/download-artifact@v3
              with:
                  path: release-artifacts/

            - uses: codfish/semantic-release-action@v3
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  plugins: |
                      ["@semantic-release/commit-analyzer", "@semantic-release/release-notes-generator", "@semantic-release/npm", [ "@semantic-release/github", { "assets": ["release-artifacts/**"], "draftRelease": true } ], "@semantic-release/changelog", [ "@semantic-release/git", { "assets": ["CHANGELOG.md", "package.json", "package-lock.json"], "message": "chore(release): publish ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}" } ] ]
                  additional-packages: |
                      ["@semantic-release/git"]
